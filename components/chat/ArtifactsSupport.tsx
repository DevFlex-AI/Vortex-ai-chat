'use client'
import { useState, useCallback, memo } from 'react'
import { Download, Code, Image, FileText, Eye, Copy } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Textarea } from '@/components/ui/textarea'
import { useToast } from '@/components/ui/use-toast'
import { cn } from '@/utils'

interface Artifact {
  id: string
  type: 'svg' | 'html' | 'code' | 'markdown'
  title: string
  content: string
  createdAt: number
  language?: string
}

interface ArtifactsSupportProps {
  artifacts: Artifact[]
  onArtifactUpdate: (id: string, content: string) => void
  onArtifactDelete: (id: string) => void
  className?: string
}

function ArtifactsSupport({ artifacts, onArtifactUpdate, onArtifactDelete, className }: ArtifactsSupportProps) {
  const { toast } = useToast()
  const [selectedArtifact, setSelectedArtifact] = useState<Artifact | null>(null)
  const [isEditing, setIsEditing] = useState(false)
  const [editContent, setEditContent] = useState('')

  const downloadArtifact = useCallback((artifact: Artifact) => {
    const blob = new Blob([artifact.content], { 
      type: artifact.type === 'svg' ? 'image/svg+xml' : 'text/html' 
    })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${artifact.title}.${artifact.type}`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }, [])

  const copyToClipboard = useCallback((content: string) => {
    navigator.clipboard.writeText(content)
    toast({
      title: 'Copied to clipboard',
      description: 'Artifact content copied successfully',
    })
  }, [toast])

  const startEditing = useCallback((artifact: Artifact) => {
    setSelectedArtifact(artifact)
    setEditContent(artifact.content)
    setIsEditing(true)
  }, [])

  const saveEdit = useCallback(() => {
    if (selectedArtifact) {
      onArtifactUpdate(selectedArtifact.id, editContent)
      setIsEditing(false)
      setSelectedArtifact(null)
      toast({
        title: 'Artifact updated',
        description: 'Your changes have been saved',
      })
    }
  }, [selectedArtifact, editContent, onArtifactUpdate, toast])

  const renderArtifactPreview = useCallback((artifact: Artifact) => {
    switch (artifact.type) {
      case 'svg':
        return (
          <div 
            className="w-full h-64 border rounded flex items-center justify-center bg-white"
            dangerouslySetInnerHTML={{ __html: artifact.content }}
          />
        )
      case 'html':
        return (
          <iframe
            srcDoc={artifact.content}
            className="w-full h-64 border rounded"
            sandbox="allow-scripts allow-same-origin"
          />
        )
      case 'code':
        return (
          <pre className="w-full h-64 overflow-auto p-4 bg-muted rounded border text-sm">
            <code>{artifact.content}</code>
          </pre>
        )
      case 'markdown':
        return (
          <div className="w-full h-64 overflow-auto p-4 border rounded prose prose-sm max-w-none">
            {artifact.content}
          </div>
        )
      default:
        return (
          <div className="w-full h-64 border rounded flex items-center justify-center text-muted-foreground">
            Preview not available
          </div>
        )
    }
  }, [])

  const getArtifactIcon = useCallback((type: Artifact['type']) => {
    switch (type) {
      case 'svg':
        return <Image className="h-4 w-4" />
      case 'html':
        return <Code className="h-4 w-4" />
      case 'code':
        return <FileText className="h-4 w-4" />
      case 'markdown':
        return <FileText className="h-4 w-4" />
      default:
        return <FileText className="h-4 w-4" />
    }
  }, [])

  if (artifacts.length === 0) {
    return (
      <Card className={cn('w-full', className)}>
        <CardContent className="flex items-center justify-center p-8 text-center">
          <div>
            <Code className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
            <p className="text-muted-foreground">No artifacts created yet</p>
            <p className="text-sm text-muted-foreground mt-1">
              Artifacts will appear here when generated by AI
            </p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className={cn('w-full', className)}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Code className="h-5 w-5" />
          Artifacts ({artifacts.length})
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="gallery" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="gallery">Gallery</TabsTrigger>
            <TabsTrigger value="editor">Editor</TabsTrigger>
          </TabsList>

          <TabsContent value="gallery" className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {artifacts.map((artifact) => (
                <Card key={artifact.id} className="overflow-hidden">
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-2">
                        {getArtifactIcon(artifact.type)}
                        <span className="truncate">{artifact.title}</span>
                      </div>
                      <Badge variant="secondary" className="text-xs">
                        {artifact.type.toUpperCase()}
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="h-32 overflow-hidden">
                      {renderArtifactPreview(artifact)}
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-xs text-muted-foreground">
                        {new Date(artifact.createdAt).toLocaleDateString()}
                      </span>
                      <div className="flex gap-1">
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-6 w-6"
                          onClick={() => setSelectedArtifact(artifact)}
                          title="View"
                        >
                          <Eye className="h-3 w-3" />
                        </Button>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-6 w-6"
                          onClick={() => startEditing(artifact)}
                          title="Edit"
                        >
                          <Code className="h-3 w-3" />
                        </Button>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-6 w-6"
                          onClick={() => copyToClipboard(artifact.content)}
                          title="Copy"
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-6 w-6"
                          onClick={() => downloadArtifact(artifact)}
                          title="Download"
                        >
                          <Download className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="editor" className="space-y-4">
            {isEditing && selectedArtifact ? (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Editing: {selectedArtifact.title}</h3>
                  <div className="flex gap-2">
                    <Button size="sm" variant="outline" onClick={() => setIsEditing(false)}>
                      Cancel
                    </Button>
                    <Button size="sm" onClick={saveEdit}>
                      Save
                    </Button>
                  </div>
                </div>
                
                <Textarea
                  value={editContent}
                  onChange={(e) => setEditContent(e.target.value)}
                  className="min-h-64 font-mono text-sm"
                  placeholder="Edit artifact content..."
                />
                
                <div className="border rounded-lg p-4">
                  <h4 className="text-sm font-medium mb-2">Preview:</h4>
                  {renderArtifactPreview({ ...selectedArtifact, content: editContent })}
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <Code className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                <p className="text-muted-foreground">Select an artifact to edit</p>
              </div>
            )}
          </TabsContent>
        </Tabs>

        {selectedArtifact && !isEditing && (
          <div className="fixed inset-0 z-50 bg-black/80 flex items-center justify-center p-4">
            <Card className="w-full max-w-4xl max-h-[90vh] overflow-hidden">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>{selectedArtifact.title}</span>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => setSelectedArtifact(null)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="overflow-auto">
                {renderArtifactPreview(selectedArtifact)}
              </CardContent>
            </Card>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

export default memo(ArtifactsSupport)